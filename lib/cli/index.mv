# Move command line interface
import fs, cli = './cli'

export program = new cli.Program([
  'Usage: move [global options] <command> [command arguments ..]\n'+
  '       move [global options] <filename>',
  'Global options:',
	#['quiet',   'Suppress all messages except errors.'],
	#['verbose', 'Print details.'],
	#['debug',   'Print too much details.'],
	['help',    'Show this help message.'],
])


program.on 'options', ^{
  #print 'options:', @options
}

# Load commands
fs.readdirSync(__dirname+'/commands').forEach ^(filename) {
  commandName = filename.replace(/\.mv$/, '')
  program.cmd[commandName] = require './commands/'+commandName }

# Program entry
export main = ^(argv) {
  
  # Detect filename for usage form:
  #   move <filename> [options]
  argv = Array.prototype.slice.call(argv || process.argv)
  for (i=2; i < argv.length; ++i) {
    v = argv[i]
    if (v[0] == '-') continue
    try {
      st = fs.statSync v
      if (st.isFile())
        argv.splice i, 0, 'run'
    } catch (e) { }
    break
  }
  
  program.main argv
}


/*

return


# stuff collected and parsed from the command line
options = {}
sources = []

# Output printers
usage = ^(die) {
  console.error((new optparse.OptionParser(available_options, banner)).help())
  if (die != undefined) process.exit(die)
}

# Program entry-point
export main = ^{
  parseOptions()
  if (options.help) return usage()
  #console.log(options, sources)

  # Run passed file(s)
  if (options.run) {
    # Check that we have some input
    if (!sources.length) {
      console.error "At least one file must be specified"
      usage(1)
    }
    
    sources.forEach(^(filename) {
      # Resolve absolute path
      try {
        filename = fs.realpathSync filename
      } catch (e) {
        if (e.errno != undefined) {
          console.error e.message
          process.exit 1
        }
        throw e
      }
      # Execute file
      #console.log 'run '+filename
      require(filename)
    })
  }
}

# Use the `optparse` to extract all options from `process.argv` that are
# specified in `available_options`.
parseOptions = ^{
  op  = new optparse.OptionParser(available_options, banner)
  options = o = op.parse(process.argv.slice(2))
  # Normalize and set pseudo-options
  o.run = !(o.compile || o.ast)
  return sources = o.arguments
}

*/